<policies>
    <inbound>
        <base />

        <!-- Returns a 200 OK with the client certificate details in the body -->
        <return-response>
            <set-status code="200" />
            <!--<set-body>@(context.Request.Certificate?.ToString())</set-body>-->
            <!--<set-body>@(context.Request.Headers.GetValueOrDefault("X-ARR-ClientCert", "X-ARR-ClientCert header not set"))</set-body>-->
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                X509Certificate2 certificate = null;
                bool isValidCertificate = false;
                var clientCertHeader = context.Request.Headers.GetValueOrDefault("X-ARR-ClientCert", "X-ARR-ClientCert header not set");

                try 
                {
                    // Decode the header value (e.g. replace %20 with a whitespace) and remove the begin and end certificate markers.
                    // The result is the base64 encoded certificate in X.509 (.cer) format without the private key.
                    var pem = System.Net.WebUtility.UrlDecode(clientCertHeader)
                                                .Replace("-----BEGIN CERTIFICATE-----", "")
                                                .Replace("-----END CERTIFICATE-----", "");

                    var bytes = Convert.FromBase64String(pem);
                    certificate = new X509Certificate2(bytes);
                    isValidCertificate = certificate.VerifyNoRevocation();
                }
                catch { }

                return JsonConvert.SerializeObject(new
                {
                    certificate = certificate?.ToString(),
                    isValidCertificate = isValidCertificate,
                    header = clientCertHeader
                });
            }</set-body>
        </return-response>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <set-header name="ErrorSource" exists-action="override">
            <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorReason" exists-action="override">
            <value>@(context.LastError.Reason)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
            <value>@(context.LastError.Message)</value>
        </set-header>
        <base />
    </on-error>
</policies>